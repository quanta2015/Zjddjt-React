{"ast":null,"code":"var DomUtils = require(\"domutils\"),\n    hasAttrib = DomUtils.hasAttrib,\n    getAttributeValue = DomUtils.getAttributeValue,\n    falseFunc = require(\"boolbase\").falseFunc; //https://github.com/slevithan/XRegExp/blob/master/src/xregexp.js#L469\n\n\nvar reChars = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\n/*\n\tattribute selectors\n*/\n\nvar attributeRules = {\n  __proto__: null,\n  equals: function (next, data) {\n    var name = data.name,\n        value = data.value;\n\n    if (data.ignoreCase) {\n      value = value.toLowerCase();\n      return function equalsIC(elem) {\n        var attr = getAttributeValue(elem, name);\n        return attr != null && attr.toLowerCase() === value && next(elem);\n      };\n    }\n\n    return function equals(elem) {\n      return getAttributeValue(elem, name) === value && next(elem);\n    };\n  },\n  hyphen: function (next, data) {\n    var name = data.name,\n        value = data.value,\n        len = value.length;\n\n    if (data.ignoreCase) {\n      value = value.toLowerCase();\n      return function hyphenIC(elem) {\n        var attr = getAttributeValue(elem, name);\n        return attr != null && (attr.length === len || attr.charAt(len) === \"-\") && attr.substr(0, len).toLowerCase() === value && next(elem);\n      };\n    }\n\n    return function hyphen(elem) {\n      var attr = getAttributeValue(elem, name);\n      return attr != null && attr.substr(0, len) === value && (attr.length === len || attr.charAt(len) === \"-\") && next(elem);\n    };\n  },\n  element: function (next, data) {\n    var name = data.name,\n        value = data.value;\n\n    if (/\\s/.test(value)) {\n      return falseFunc;\n    }\n\n    value = value.replace(reChars, \"\\\\$&\");\n    var pattern = \"(?:^|\\\\s)\" + value + \"(?:$|\\\\s)\",\n        flags = data.ignoreCase ? \"i\" : \"\",\n        regex = new RegExp(pattern, flags);\n    return function element(elem) {\n      var attr = getAttributeValue(elem, name);\n      return attr != null && regex.test(attr) && next(elem);\n    };\n  },\n  exists: function (next, data) {\n    var name = data.name;\n    return function exists(elem) {\n      return hasAttrib(elem, name) && next(elem);\n    };\n  },\n  start: function (next, data) {\n    var name = data.name,\n        value = data.value,\n        len = value.length;\n\n    if (len === 0) {\n      return falseFunc;\n    }\n\n    if (data.ignoreCase) {\n      value = value.toLowerCase();\n      return function startIC(elem) {\n        var attr = getAttributeValue(elem, name);\n        return attr != null && attr.substr(0, len).toLowerCase() === value && next(elem);\n      };\n    }\n\n    return function start(elem) {\n      var attr = getAttributeValue(elem, name);\n      return attr != null && attr.substr(0, len) === value && next(elem);\n    };\n  },\n  end: function (next, data) {\n    var name = data.name,\n        value = data.value,\n        len = -value.length;\n\n    if (len === 0) {\n      return falseFunc;\n    }\n\n    if (data.ignoreCase) {\n      value = value.toLowerCase();\n      return function endIC(elem) {\n        var attr = getAttributeValue(elem, name);\n        return attr != null && attr.substr(len).toLowerCase() === value && next(elem);\n      };\n    }\n\n    return function end(elem) {\n      var attr = getAttributeValue(elem, name);\n      return attr != null && attr.substr(len) === value && next(elem);\n    };\n  },\n  any: function (next, data) {\n    var name = data.name,\n        value = data.value;\n\n    if (value === \"\") {\n      return falseFunc;\n    }\n\n    if (data.ignoreCase) {\n      var regex = new RegExp(value.replace(reChars, \"\\\\$&\"), \"i\");\n      return function anyIC(elem) {\n        var attr = getAttributeValue(elem, name);\n        return attr != null && regex.test(attr) && next(elem);\n      };\n    }\n\n    return function any(elem) {\n      var attr = getAttributeValue(elem, name);\n      return attr != null && attr.indexOf(value) >= 0 && next(elem);\n    };\n  },\n  not: function (next, data) {\n    var name = data.name,\n        value = data.value;\n\n    if (value === \"\") {\n      return function notEmpty(elem) {\n        return !!getAttributeValue(elem, name) && next(elem);\n      };\n    } else if (data.ignoreCase) {\n      value = value.toLowerCase();\n      return function notIC(elem) {\n        var attr = getAttributeValue(elem, name);\n        return attr != null && attr.toLowerCase() !== value && next(elem);\n      };\n    }\n\n    return function not(elem) {\n      return getAttributeValue(elem, name) !== value && next(elem);\n    };\n  }\n};\nmodule.exports = {\n  compile: function (next, data, options) {\n    if (options && options.strict && (data.ignoreCase || data.action === \"not\")) throw SyntaxError(\"Unsupported attribute selector\");\n    return attributeRules[data.action](next, data);\n  },\n  rules: attributeRules\n};","map":null,"metadata":{},"sourceType":"script"}